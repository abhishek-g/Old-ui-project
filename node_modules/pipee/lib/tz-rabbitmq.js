var MODULE = "tz-queue";

var amqp = require('amqp');

var RabbitMQ = function() {
	
};

RabbitMQ.prototype.connect = function(config) {
	
	try {
		var connection = amqp.createConnection(config);
		console.log ("Rabbit MQ Connected to [HOST : " + config.host + "] [PORT : " + config.port + "] and Listening ...");
		this.connection = connection;
		return connection;
	} catch (e) {
		console.log ("Rabbit MQ Connectection Failed!");
		console.log(e.stack);
		return null;
	}
	
};

RabbitMQ.prototype.getExchange = function(type) {	
	return this.connection.exchange('amq.'+type,{type:type});
};



RabbitMQ.prototype.pub = function (key, msg) {
	try{
		this.connection.publish(key, msg);
		
	}catch(err){
		console.log('Exception handled @ [' + MODULE + ']  in pub : '+ err.stack );	
	}
};


RabbitMQ.prototype.sub = function () {
	var that = this;
	var  qName= arguments[0];
	var options = arguments.length==3 ? getValidOptions(arguments[1]) : getValidOptions(null);
	var qHandler = arguments.length==3 ? arguments[2] : arguments[1];	
	console.log(options.prefetchCount);
	try { 
		that.connection.queue (qName,{durable:options.durable,autoDelete:options.autoDelete,passive:options.passive}, function(q) {					
			options.bind ? q.bind("amq."+options.bind.exchangeType,options.bind.exchangeType||"*") : null;			
			q.subscribe({ ack: options.ack, prefetchCount: options.prefetchCount }, function(msg, headers, info, originalMessageObject) {
				if(options.ack){
					qHandler(msg, originalMessageObject);
				}else{
					qHandler(msg, q);
				}				
			});			
		});		
	}catch(err){
		console.log('Exception handled @ [' + MODULE + ']  in sub : '+ err.stack );	
	}
};


var getValidOptions = function(qOptions){
	qOptions = qOptions || {};
	var options = {};
	options.ack = qOptions.ack || true; //TODO Default should be false
	options.autoDelete = qOptions.autoDelete || false; 
	options.durable =  qOptions.durable || true; //TODO Default should be false
	options.passive = qOptions.passive || false;
	options.prefetchCount = qOptions.prefetchCount || 1;
	options.bind = (qOptions.bind && qOptions.bind.exchangeType && qOptions.bind.routing_key && qOptions.bind) || null ;	
	return options;
};


module.exports = RabbitMQ;
