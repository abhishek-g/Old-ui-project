/**
 * Created by harinaths on 3/4/14.
 */

var Db = require('mongodb').Db,
    MongoClient = require('mongodb').MongoClient,
    Server = require('mongodb').Server,
    ReplSetServers = require('mongodb').ReplSetServers,
    ObjectID = require('mongodb').ObjectID,
    Binary = require('mongodb').Binary,
    GridStore = require('mongodb').GridStore,
    Grid = require('mongodb').Grid,
    Code = require('mongodb').Code,
    BSON = require('mongodb').pure().BSON,
    assert = require('assert'),
    mongo = require('mongodb');


var MongoDB = function(config){
    this.config = config;
    this.connect();
    this.collections = {};
};


MongoDB.prototype.connect = function(){
    var self = this;
    MongoClient.connect(getConnectionUrl(self.config), function(err, db){

        if(!err){
            self.db = db;
        }else{
            console.log("Mongo DB connection failed!  ", self.config);
        }

    });

}


MongoDB.prototype.find = function(collection, criteria, cb){


    var query = (this.collections[collection] || this.addToCollection(collection)).find(criteria.condition || {}, criteria.requiredFields || {});
    criteria.sort ? query['sort'](criteria.sort) : '';
    criteria.pagination ? query['skip'](criteria.pagination.skip) : query['skip'](0);
    criteria.pagination ? query['limit'](criteria.pagination.limit) : query['skip'](0);
    query.toArray(cb);

};



MongoDB.prototype.count = function (collection,criteria,cb) {
    (this.collections[collection] || this.addToCollection(collection)).count(criteria.condition || {}, cb)
};

MongoDB.prototype.insert = function (collection,object,cb) {
    (this.collections[collection] || this.addToCollection(collection)).insert( object, {w:1} ,cb );
};

MongoDB.prototype.remove = function (collection,criteria,cb) {
    (this.collections[collection] || this.addToCollection(collection)).remove(criteria.condition || {},{w:1}, cb)
};

MongoDB.prototype.distinct = function (collection,criteria,cb) {
    (this.collections[collection] || this.addToCollection(collection)).distinct(criteria.field,criteria.condition || {}, cb)
};

MongoDB.prototype.findOne = function (collection, criteria, cb) {
    var options = {};
    criteria.sort && (options['sort']=criteria.sort);
    criteria.requiredFields && (options['fields']= criteria.requiredFields);



    collection && (this.collections[collection] || this.addToCollection(collection)).findOne(criteria.condition || {},options, cb)
};

MongoDB.prototype.save = function (collection, object, cb) {
    (this.collections[collection] || this.addToCollection(collection)).save( object, {w:1} ,cb );
};

MongoDB.prototype.update = function (collection, criteria, cb) {
    (this.collections[collection] || this.addToCollection(collection)).update( criteria.condition, criteria.value, criteria.options ,cb );
};

MongoDB.prototype.drop = function (collection, cb) {
    (this.collections[collection] || this.addToCollection(collection)).drop(cb );
};

MongoDB.prototype.createIndex = function (collection, criteria, cb) {

};

MongoDB.prototype.ensureIndex = function (collection, criteria, cb) {
};

MongoDB.prototype.dropIndex = function (collection, criteria, cb) {
};

MongoDB.prototype.mapReduce = function (collection,criteria, cb) {
    (this.collections[collection] || this.addToCollection(collection)).mapReduce(criteria.map, criteria.reduce, criteria.options, cb)
};

MongoDB.prototype.aggregate = function (collection,criteria, cb) {
    (this.collections[collection] || this.addToCollection(collection)).aggregate(criteria, cb)
};


MongoDB.prototype.executeDbCommand = function (commandObject, cb) {
};

MongoDB.prototype.ObjectId = function(hex){
    return mongo.ObjectID(hex);
};

MongoDB.prototype.collectionNames = function(cb){
};

MongoDB.prototype.Timestamp = function(value){
};
























MongoDB.prototype.addToCollection = function(collection){
    this.collections[collection] = this.db.collection(collection);
    return this.collections[collection]
}



var getConnectionUrl = function(config){

    if(config.url){
        return config.url
    }else if(config.host && config.port){
        return  'mongodb://'+config.host+':'+config.port+'/'+config.db
    }

}


module.exports = MongoDB;
