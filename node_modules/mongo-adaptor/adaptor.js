/**
 * Created by harinaths on 3/4/14.
 */


var Adaptor = function(config){


    this.service = null;
    switch(config.service)
    {
        case 'MONGODB':
            /* MongoDB Connection */
            this.service = new (require('./lib/mongodb-adaptor'))(config)
            break;

        case 'CASSANDRA':
            /* Cassandra Connection */
            break;
        default:

    }
};


Adaptor.prototype.find = function(collection, options, cb){
    this.service.find(collection, options, cb);
};


Adaptor.prototype.count = function(collection, options, cb){
    this.service.count(collection, options, cb);
};

Adaptor.prototype.insert = function (collectionName,criteria,cb) {
    this.service.insert(collectionName,criteria,cb);
};

Adaptor.prototype.remove = function (collectionName,criteria,cb) {
    this.service.remove(collectionName,criteria,cb);
};

Adaptor.prototype.distinct = function (collectionName,criteria,cb) {
    this.service.distinct(collectionName,criteria,cb);
};

Adaptor.prototype.findOne = function (collectionName, criteria, cb) {
    this.service.findOne(collectionName,criteria,cb);
};

Adaptor.prototype.save = function (collectionName, object, cb) {
    this.service.save(collectionName,object,cb);
};

Adaptor.prototype.update = function (collectionName, object, cb) {
    this.service.update(collectionName,object,cb);
};

Adaptor.prototype.drop = function (collectionName, cb) {
    this.service.drop(collectionName,cb);
};

Adaptor.prototype.createIndex = function (collectionName, criteria, cb) {
    this.service.createIndex(collectionName,criteria,cb);
};

Adaptor.prototype.ensureIndex = function (collectionName, criteria, cb) {
    this.service.ensureIndex(collectionName,criteria,cb);
};

Adaptor.prototype.dropIndex = function (collectionName, criteria, cb) {
    this.service.dropIndex(collectionName,criteria,cb);
};

Adaptor.prototype.mapReduce = function (collectionName,criteria, cb) {
    this.service.mapReduce(collectionName, criteria, cb);
};

Adaptor.prototype.aggregate = function (collectionName,criteria, cb) {
    this.service.aggregate(collectionName, criteria, cb);
};


Adaptor.prototype.executeDbCommand = function (commandObject, cb) {
    this.service.executeDbCommand(commandObject, cb);
};

Adaptor.prototype.ObjectId = function(hex){
    return this.service.ObjectId(hex);
};

Adaptor.prototype.collectionNames = function(cb){
    return this.service.collectionNames(cb);
};

Adaptor.prototype.Timestamp = function(value){
    return this.service.Timestamp;
};






module.exports = Adaptor;