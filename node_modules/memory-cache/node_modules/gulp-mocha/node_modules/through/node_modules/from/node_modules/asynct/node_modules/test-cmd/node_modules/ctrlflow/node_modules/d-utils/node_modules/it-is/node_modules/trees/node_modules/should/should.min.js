/*
 * should - test framework agnostic BDD-style assertions
 * @version v7.0.2
 * @author TJ Holowaychuk <tj@vision-media.ca> and contributors
 * @link https://github.com/shouldjs/should.js
 * @license MIT
 */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Should=t()}}(function(){return function t(e,r,a){function n(s,i){if(!r[s]){if(!e[s]){var u="function"==typeof require&&require;if(!i&&u)return u(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var h=r[s]={exports:{}};e[s][0].call(h.exports,function(t){var r=e[s][1][t];return n(r?r:t)},h,h.exports,t,e,r,a)}return r[s].exports}for(var o="function"==typeof require&&require,s=0;s<a.length;s++)n(a[s]);return n}({1:[function(t,e){var r=t("./lib/should"),a=Object.prototype,n="should";try{var o=r.extend(n,a);r._prevShould=o}catch(s){}e.exports=r},{"./lib/should":17}],2:[function(t,e){function r(t){return s+t}function a(t){return t.split("\n").map(r).join("\n")}var n=t("./util"),o=function(t){if(n.merge(this,t),t.message||Object.defineProperty(this,"message",{get:function(){return this._message||(this._message=this.generateMessage(),this.generatedMessage=!0),this._message},configurable:!0,enumerable:!1}),Error.captureStackTrace)Error.captureStackTrace(this,this.stackStartFunction);else{var e=new Error;if(e.stack){var r=e.stack;if(this.stackStartFunction){var a=n.functionName(this.stackStartFunction),o=r.indexOf("\n"+a);if(o>=0){var s=r.indexOf("\n",o+1);r=r.substring(s+1)}}this.stack=r}}},s="    ";o.prototype=Object.create(Error.prototype,{name:{value:"AssertionError"},generateMessage:{value:function(){if(!this.operator&&this.previous)return this.previous.message;var t=n.format(this.actual),e="expected"in this?" "+n.format(this.expected):"",r="details"in this&&this.details?" ("+this.details+")":"",o