!function (context, definition) {
  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
    module.exports = definition(module, exports);
  } else {
    var mod = { exports: {} };
    definition.call(mod.exports, mod, mod.exports);
    if (typeof define === 'function' && typeof define.amd  === 'object') {
      define(function () { return mod.exports; });
    } else {
      if (!context.chai) throw new Error('Chai cannot be found in current scope.');
      context.chai.use(mod.exports);
    }
  }
}(this, function (module, exports) {


  /*!
   * chai-spies :: a chai plugin
   * Copyright (c) 2012 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */

  /*!
   * We are going to export a function that can be used through chai
   */

  module.exports = function (chai, _) {
    // Easy access
    var Assertion = chai.Assertion
      , flag = _.flag
      , i = _.inspect

    /**
     * # chai.spy (function)
     *
     * Wraps a function in a proxy function. All calls will
     * pass through to the original function.
     *
     *      function original() {}
     *      var spy = chai.spy(original)
     *        , e_spy = chai.spy();
     *
     * @param {Function} function to spy on
     * @returns function to actually call
     * @api public
     */

    chai.spy = function (name, fn) {
      if (typeof name === 'function') {
        fn = name;
        name = undefined;
      }

      fn = fn || function () {};

      function makeProxy (length, fn) {
        switch (length) {
          case 0 : return function () { return fn.apply(this, arguments); };
          case 1 : return function (a) { return fn.apply(this, arguments); };
          case 2 : return function (a,b) { return fn.apply(this, arguments); };
          case 3 : return function (a,b,c) { return fn.apply(this, arguments); };
          case 4 : return function (a,b,c,d) { return fn.apply(this, arguments); };
          case 5 : return function (a,b,c,d,e) { return fn.apply(this, arguments); };
          case 6 : return function (a,b,c,d,e,f) { return fn.apply(this, arguments); };
          case 7 : return function (a,b,c,d,e,f,g) { return fn.apply(this, arguments); };
          case 8 : return function (a,b,c,d,e,f,g,h) { return fn.apply(this, arguments); };
          case 9 : return function (a,b,c,d,e,f,g,h,i) { return fn.apply(this, arguments); };
          default : return function (a,b,c,d,e,f,g,h,i,j) { return fn.apply(this, arguments); };
        }
      };

      var proxy = makeProxy(fn.length,