#!/usr/bin/env node
require('superstack');

var path = require('path');
var fs = require('fs');

var colors = require('colors');
var program = require('commander');
var yaml = require('yamljs');
var xtend = require('xtend');
var osenv = require('osenv');
var find_nearest_file = require('find-nearest-file');
var _ = require('lodash');

var Zuul = require('../lib/zuul');
var scout_browser = require('../lib/scout_browser');
var flatten_browser = require('../lib/flatten_browser');

program
.version(require('../package.json').version)
.usage('[options] <files | dir>')
.option('--ui <testing ui>', 'ui for tests (mocha-bdd, mocha-tdd, qunit, tape)')
.option('--local [port]', 'port for manual testing in a local browser')
.option('--tunnel [type]', 'establish a tunnel for outside access. only used when --local is specified')
.option('--disable-tunnel', 'don\'t establish a tunnel for outside access. override any config in .zuul.yml and .zuulrc')
.option('--phantom [port]', 'run tests in phantomjs. PhantomJS must be installed separately.')
.option('--electron', 'run tests in electron. electron must be installed separately.')
.option('--tunnel-host <host url>', 'specify a localtunnel server to use for forwarding')
.option('--sauce-connect [tunnel-identifier]', 'use saucelabs with sauce connect instead of localtunnel. Optionally specify the tunnel-identifier')
.option('--server <the server script>', 'specify a server script to be run')
.option('--list-available-browsers', 'list available browsers and versions')
.option('--browser-name <browser name>', 'specficy the browser name to test an individual browser')
.option('--browser-version <browser version>', 'specficy the browser version to test an individual browser')
.option('--browser-platform <browser platform>', 'specficy the browser platform to test an individual browser')
.option('--browser-retries <retries>', 'number of retries allowed when trying to start a cloud browser, default to 6')
.option('--browser-output-timeout <timeout>', 'how much time to wait between two test results, default to -1 (no timeout)')
.option('--concurrency <n>', 'specify the number of concurrent browsers to test')
.option('--no-coverage', 'disable code coverage analysis with istanbul')
.option('--open', 'open a browser automatically. only used when --local is specified')
.parse(process.argv);

var config = {
    files: program.args,
    local: program.local,
    ui: program.ui,
    tunnel: program.tunnel,
    phantom: program.phantom,
    electron: program.electron,
    prj_dir: process.cwd(),
    tunnel_host: program.tunnelHost,
    sauce_connect: program.sauceConnect,
    server: program.server,
    concurrency: program.concurrency,
    coverage: program.coverage,
    open: program.open,
    browser_retries: program.browserRetries && parseInt(program.browserRetries, 10),
    browser_output_timeout: program.browserRetries && parseInt(program.browserOutputTimeout, 10)
};

// Remove unspecified flags
for (var key in config) {
    if (typeof config[key] === 'undefined') {
        delete config[key];
    }
}

if(!process.stdout.isTTY){
    colors.setTheme({
        bold: 'stripColors',
        italic: 'stripColors',
        underline: 'stripColors',
        inverse: 'stripColors',
        yellow: 'stripColors',
        cyan: 'stripColors',
        white: 'stripColors',
        magenta: 'stripColors',
        green: 'stripColors',
        red: 'stripColors',
        grey: 'stripColors',
        blue: 'stripColors',
        rainbow: 'stripColors',
        zebra: 'stripColors',
        random: 'stripColors'
    });
}

if (program.listAvailableBrowsers) {
    scout_browser(function(err, all_browsers) {
        if (err) {
            console.error('Unable to get available browsers for saucelabs'.red);
            console.error(err.stack);
            return process.exit(1);
        }

        for (var browser in all_browsers) {
            console.log(browser);
            var versions = _.uniq(_.pluck(all_browsers[browser], 'version')).sort(function(a, b) {
                var a_num = Number(a);
                var b_num = Number(b);

                if (a_num && !b_num) {
                    return -1;
                } else if (!a_num && b_num) {
                    return 1;
                } else if (a === b) {
                    return 0;
                } else if (a_num > b_num) {
                    return 1;
                }

                return -1;
            });
            var platforms = _.sortBy(_.uniq(_.pluck(all_browsers[browser], 'platform')));

            console.log('   Versions: ' + versions.join(', '));
            console.log('   Platforms: ' + platforms.join(', '));
        }
    });
    return;
}

if (config.files.length === 0) {
    console.error('at least one `js` test file must be specified');
    return process.exit(1);
}

if ((program.browserVersion || program.browserPlatform) && !program.browserName) {
    console.error('the browser name needs to be specified (via --browser-name)');
    return process.exit(1);
}

if ((program.browserName || program.browserPlatform) && !program.browserVersion) {
    console.error('the browser version needs to be specified (via --browser-version)');
    return process.exit(1);
}

config = readLocalConfig(config)

// Overwrite browsers from command line arguments
if (program.browserName) {
    config = xtend(config, { browsers: [{ name: program.browserName, version: program.browserVersion, platform: program.browserPlatform }] });
}

if (typeof program.tunnel === 'string') {
    config.tunnel.type = program.tunnel;
}

config = readGlobalConfig(config)

// Overwrite tunnel option if --disable-tunnel specified
if (program.disableTunnel) {
    config.tunnel = false;
}

var sauce_username = process.env.SAUCE_USERNAME;
var sauce_key = process.env.SAUCE_ACCESS_KEY;

config.username = sauce_username || config.sauce_username;
config.key = sauce_key || config.sauce_key;

if (!config.ui) {
    console.error('Error: `ui` must be configured in .zuul.yml or specified with the --ui flag');
    return process.exit(1);
}

var pkg = {};
try {
    pkg = require(process.cwd() + '/package.json');
} catch (err) {}

config.name = config.name || pkg.name || 'there is only zuul';

if (config.builder) {
    // relative path will needs to be under project dir
    if (config.builder[0] === '.') {
        config.builder = path.resolve(config.prj_dir, config.builder);
    }

    config.builder = require.resolve(config.builder);
}

var zuul = Zuul(config);

if (config.local) {
    return zuul.run(function(passed) {
    });
}
else if (config.phantom || config.electron) {
    return zuul.run(function(passed) {
        process.exit(passed ? 0 : 1);
    });
}

if (!config.username || !config.key) {
    console.error('Error:');
    console.error('Zuul tried to run tests in saucelabs, however no saucelabs credentials were provided.');
    console.error('See the zuul wiki (https://github.com/defunctzombie/zuul/wiki/Cloud-testing) for info on how to setup cloud testing.');
    process.exit(1);
    return;
}

scout_browser(function(err, all_browsers) {
    var browsers = [];

    if (err) {
    