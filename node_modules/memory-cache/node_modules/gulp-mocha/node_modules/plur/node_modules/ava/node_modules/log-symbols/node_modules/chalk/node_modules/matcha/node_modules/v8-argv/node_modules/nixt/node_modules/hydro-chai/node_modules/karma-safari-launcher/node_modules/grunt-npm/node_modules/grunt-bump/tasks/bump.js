/*
 * Increase version number
 *
 * grunt bump
 * grunt bump:patch
 * grunt bump:minor
 * grunt bump:major
 *
 * @author Vojta Jina <vojta.jina@gmail.com>
 * @author Mathias Paumgarten <mail@mathias-paumgarten.com>
 */
var semver = require('semver');
var exec = require('child_process').exec;

module.exports = function(grunt) {
  grunt.registerTask('bump', 'Increment the version number.', function(versionType) {
    var opts = this.options({
      files: ['package.json'],
      updateConfigs: [], // array of config properties to update (with files)
      commit: true,
      commitMessage: 'Release v${version}',
      commitFiles: ['package.json'], // '-a' for all files
      createTag: true,
      tagName: 'v${version}',
      tagMessage: 'Version ${version}',
      push: true,
      pushTo: 'origin'
    });

    var done = this.async();
    var queue = [];
    var next = function() {
      if (!queue.length) {
        return done();
      }

      queue.shift()();
    };
    var runIf = function(condition, behavior) {
      if (condition) {
        queue.push(behavior);
      }
    };

    var globalVersion; // when bumping multiple files
    var VERSION_REGEXP = /([\'|\"]version[\'|\"][ ]*:[ ]*[\'|\"])([\d|.]*)([\'|\"])/i;

    // BUMP ALL FILES
    opts.files.forEach(function(file, idx) {
      var version = null;
      var content = grunt.file.read(file).replace(VERSION_REGEXP, function(match, prefix, parsedVersion, suffix) {
        version = semver.inc(parsedVersion, versionType || 'patch');
        return prefix + version + suffix;
      });

      if (!version) {
        grunt.fatal('Can not find a version to bump in ' + file);
      }

      grunt.file.write(file, content);
      grunt.log.ok('Version bumped to ' + version + (opts.files.length > 1 ? ' (in ' + file + ')' : ''));

      if (!globalVersion) {
        globalVersion = version;
      } else if (globalVersion !== version) {
        grunt.warn('Bumping multiple files with different versions!');
      }

      var configProperty = opts.updateConfi