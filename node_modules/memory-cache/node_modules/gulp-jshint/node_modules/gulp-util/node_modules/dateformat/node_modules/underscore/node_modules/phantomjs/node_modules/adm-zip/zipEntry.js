var Utils = require("./util"),
    Headers = require("./headers"),
    Methods = require("./methods");

module.exports = function () {

    var _entryHeader = new Headers.EntryHeader(),
        _dataHeader = new Headers.DataHeader(),

        _entryName = "",
        _isDirectory = false,
        _extra = null,
        _compressedData = null,
        _data = null,
        _comment = "",
        _needDeflate = false;

    function decompress(/*Boolean*/async, /*Function*/callback) {
       // if (_data == null)   {
        if (true) {
            if (_compressedData == null) {
                if (_isDirectory) {
                    if (async && callback) {
                        callback(new Buffer(), "directory"); //si added error.
                    }
                    return;
                }
                //throw 'Noting to decompress';
				callback(new Buffer(), "Nothing to decompress");//si added error.
            }
            switch (_dataHeader.method) {
                case Utils.Constants.STORED:
                    _data = new Buffer(_dataHeader.size);
                    _compressedData.copy(_data, 0, _dataHeader.fileHeaderSize);
                    if (Utils.crc32(_data) != _dataHeader.crc) {
                        //throw Utils.Errors.BAD_CRC
						callback(_data, Utils.Errors.BAD_CRC);//si added error
						return Utils.Errors.BAD_CRC;
                    } else {//si added otherwise did not seem to return data.
						if (callback) callback(_data);
						return 'ok';
					}
                    break;
                case Utils.Constants.DEFLATED:
                    var inflater = new Methods.Inflater(_compressedData.slice(_dataHeader.fileHeaderSize));
                    if (!async) {
                        _data = new Buffer(_entryHeader.size);
                        _data.fill(0);
                        inflater.inflate(_data);
                        if (Utils.crc32(_data) != _dataHeader.crc) {
                            console.war