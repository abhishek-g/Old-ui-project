#!/usr/bin/env node


var path   = require('path'),
    fs     = require('fs'),
    util   = require('util'),
    glob   = require('glob'),
    NopStream   = require('../lib/utils/nopstream').NopStream,
    events = require('events');

//
// Attempt to load Coffee-Script. If it's not available, continue on our
// merry way, if it is available, start searching for `*.coffee` scripts too.
//
var fileExt, specFileExt;

try {
    var coffee = require('coffee-script');
    if(coffee.register) coffee.register();
    fileExt     = /\.(js|coffee)$/;
    specFileExt = /[.(-|_)]((t|T)est|(s|S)pec)\.(js|coffee)$/;
} catch (_) {
    fileExt     = /\.js$/;
    specFileExt = /[.(-|_)]((t|T)est|(s|S)pec)\.js$/;
}

var inspect = require('eyes').inspector({
    stream: null,
    styles: { string: 'grey', regexp: 'grey' }
});

var vows = require('../lib/vows');
var cutils = require('../lib/vows/console');
var stylize = require('../lib/vows/console').stylize;
var _reporter = require('../lib/vows/reporters/dot-matrix'), reporter = {
    name: _reporter.name
};
var _coverage;

var nodeMinorVersion = parseInt(process.version.split('.')[1], 10);

var help = [
    "usage: vows [FILE, ...] [options]",
    "",
    "options:",
    "  -v, --verbose     Enable verbose output",
    "  -w, --watch       Watch mode",
    "  -s, --silent      Don't report",
    "  -i, --isolate     Run each test in its own vows process",
    "  -m  PATTERN       Only run tests matching the PATTERN string",
    "  -r  PATTERN       Only run tests matching the PATTERN regexp",
    "  --json            Use JSON reporter",
    "  --spec            Use Spec reporter",
    "  --tap             Use TAP reporter",
    "  --dot-matrix      Use Dot-Matrix reporter",
    "  --xunit           Use xUnit reporter",
    "  --cover-plain     Print plain coverage map if detected",
    "  --cover-html      Write coverage map to \"coverage.html\"",
    "  --cover-json      Write unified coverage map to \"coverage.json\"",
    "  --cover-xml       Write coverage map to \"coverage.xml\" in Emma xml",
    "  --no-color        Don't use terminal colors",
    "  --version         Show version",
    "  -h, --help        You're staring at it"
].join('\n');

var options = {
    reporter: reporter,
    matcher: /.*/,
    watch: false,
    coverage: false,
    isolate: false,
    shuffle: false,
    nocolor: !process.stdout.isTTY
};

var files = [];
var wildcardFiles = [];

// Get rid of process runner
// ('node' in most cases)
var arg, args = [], argv = process.argv.slice(2);


// Current directory index,
// and path of test folder.
var root, testFolder;

//
// Parse command-line parameters
//
while (arg = argv.shift()) {
    if (arg === __filename) { continue }

    if (arg[0] !== '-') {
        args.push(arg);
    } else {
        arg = arg.match(/^--?(.+)/)[1];

        if (arg[0] === 'r') {
            options.matcher = new(RegExp)(argv.shift());
        } else if (arg[0] === 'm') {
            options.matcher = (function (str) { // Create an escaped RegExp
                var specials = '. * + ? | ( ) [ ] { } \\ ^ ? ! = : $'.split(' ').join('|\\'),
                    regex    = new(RegExp)('(\\' + specials + ')', 'g');
                return new(RegExp)(str.replace(regex, '\\$1'));
            })(argv.shift());
        } else if (arg in options) {
            options[arg] = true;
        } else {
            switch (arg) {
                case 'json':
                    _reporter = require('../lib/vows/reporters/json');
                    break;
                case 'spec':
                    _reporter = require('../lib/vows/reporters/spec');
                    break;
                case 'tap':
                    _reporter = require('../lib/vows/reporters/tap');
                    break;
                case 'dot-matrix':
                    _reporter = require('../lib/vows/reporters/dot-matrix');
                    break;
                case 'silent':
                case 's':
                    _reporter = require('../lib/vows/reporters/silent');
                    break;
                case 'xunit':
                    _reporter = require('../lib/vows/reporters/xunit');
                    break;
                case 'cover-plain':
                    options.coverage = true;
                    _coverage = require('../lib/vows/coverage/report-plain');
                    break;
                case 'cover-html':
                    options.coverage = true;
                    _coverage = require('../lib/vows/coverage/report-html');
                    break;
                case 'cover-json':
                    options.coverage = true;
                    _coverage = require('../lib/vows/coverage/report-json');
                    break;
                case 'cover-xml':
                    options.coverage = true;
                    _coverage = require('../lib/vows/coverage/report-xml');
                    break;
                case 'verbose':
                case 'v':
                    options.verbose = true;
                    break;
                case 'watch':
                case 'w':
                    options.watch = true;
                    break;
                case 'supress-stdout':
                    options.supressStdout = true;
                    break;
                case 'shuffle':
                    options.shuffle = true;
                    break;
                case 'isolate':
                case 'i':
                    options.isolate = true;
                    break;
                case 'no-color':
                    options.nocolor = true;
                    break;
                case 'color':
                    options.nocolor = false;
                    break;
                case 'no-error':
                    options.error = false;
                    break;
                case 'version':
                    console.log('vows ' + vows.version);
                    process.exit(0);
                case 'help':
                case 'h':
                    console.log(help);
                    process.exit(0);
                    break;
            }
        }
    }
}

if (options.nocolor) {
    cutils.nocolor = true;
    inspect = require('eyes').inspector({ stream: null, styles: false });
}

if (options.supressStdout) {
    _reporter.setStream && _reporter.setStream(process.stdout);
    var devNullStream = null;

    if(process.platform === 'win32'){
        devNullStream = new NopStream ();
    } else {
        devNullStream = fs.createWriteStream('/dev/null');
    }

    process.__defineGetter__('stdout', function () {
        return devNullStream;
    });
}

if (options.watch) {
    options.reporter = reporter = require('../lib/vows/reporters/watch');
}

msg('bin', 'argv', args);
msg('bin', 'options', { reporter: options.reporter.name, matcher: options.matcher });

if (args.length === 0 || options.watch) {
    msg('bin', 'discovering', 'folder structure');
    root = fs.readdirSync('.');

    if (root.indexOf('test') !== -1) {
        testFolder = 'test';
    } else if (root.indexOf('spec') !== -1) {
        testFolder = 'spec';
    } else {
        abort("runner", "couldn't find test folder");
    }
    msg('bin', 'discovered', "./" + testFolder);
    if (args.length === 0) {
        args = paths(testFolder).filter(function (f) {
            return specFileExt.test(f);
        });

        if (options.watch) {
            args = args.concat(paths('lib'), paths('src'));
        }
    }
}

if (! options.watch) {
    reporter.report = function (data, filename) {
        switch (data[0]) {
            case 'subject':
            case 'vow':
            case 'context':
            case 'error':
                _reporter.report(data, filename);
                break;
            case 'end':
                (options.verbose || _reporter.name === 'json') &&
                _reporter.report(data);
                break;
            case 'finish':
                options.verbose ?
                    _reporter.print('\n')
                    :
                    _reporter.print(' ');
                break;
        }
    };
    reporter.reset 