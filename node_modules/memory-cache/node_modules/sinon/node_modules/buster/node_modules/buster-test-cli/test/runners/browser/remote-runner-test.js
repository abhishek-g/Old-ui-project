var bane = require("bane");
var buster = require("buster-node");
var assert = buster.assert;
var refute = buster.refute;
var remoteRunner = require("../../../lib/runners/browser/remote-runner");

buster.testCase("Remote runner", {
    setUp: function () {
        this.clock = this.useFakeTimers();
        this.emitter = bane.createEventEmitter();
        this.emitter.onSlaveDeath = function () {};

        this.emit = function (event, data, slaveId) {
            return this.emitter.emit(event, {
                data: data,
                slaveId: slaveId
            });
        };

        this.subscribeTo = function (event) {
            var listener = this.spy();
            this.runner.on(event, listener);

            return listener;
        };

        this.subscribeToMany = function () {
            var listeners = [];

            for (var i = 0, l = arguments.length; i < l; ++i) {
                listeners.push(this.subscribeTo(arguments[i]));
            }

            return listeners;
        };

        this.uas = ["Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.12) Gecko/20101027 Ubuntu/10.10 (maverick) Firefox/4.0",
                        "Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/11.0.517.44 Safari/534.7"];
    },

    "starting a run": {
        setUp: function () {
            var logger = { debug: this.stub() };
            var config = { config: 42 };
            this.runner = remoteRunner.create(this.emitter, logger, config);
            this.slaves = [{ id: 1 }, { id: 2 }];
        },

        "sets client info when setting slaves": function () {
            this.runner.setSlaves([{ id: 1, userAgent: this.uas[0] }]);

            assert.match(this.runner.getClient(1), {
                browser: "Firefox",
                version: "4.0",
                os: { family: "Ubuntu" }
            });
        },

        "enumerates similar user agents": function () {
            this.runner.setSlaves([
                { id: 1, userAgent: this.uas[0] },
                { id: 2, userAgent: this.uas[0] }
            ]);

            assert.equals(this.runner.getClient(1).toString(), "Firefox 4.0, Ubuntu 10.10");
            assert.equals(this.runner.getClient(2).toString(), "Firefox 4.0, Ubuntu 10.10 (2)");
        },

        "enumerates all user agents from same browser": function () {
            this.runner.setSlaves([
                { id: 1, userAgent: this.uas[0] },
                { id: 2, userAgent: this.uas[0] },
                { id: 3, userAgent: this.uas[0] },
                { id: 4, userAgent: this.uas[0] }
            ]);

            assert.equals(this.runner.getClient(4).toString(), "Firefox 4.0, Ubuntu 10.10 (4)");
        },

        "emits client:connect for every slave": function () {
            var listener = this.spy();
            this.runner.on("client:connect", listener);

            this.runner.setSlaves([
                { id: 1, userAgent: this.uas[0] },
                { id: 2, userAgent: this.uas[1] }
            ]);

            assert.calledTwice(listener);
            assert.match(listener.args[1][0], {
                browser: "Chrome",
                version: "11.0",
                os: { family: "Linux i686" }
            });
        }
    },

    "while tests are running": {
        setUp: function () {
            var logger = { debug: this.stub() };
            this.runner = remoteRunner.create(this.emitter, logger);
            this.runner.setSlaves([
                { id: 1, userAgent: this.uas[0] },
                { id: 2, userAgent: this.uas[1] }
            ]);
        },

        "emits progress:suite:start event": function () {
            var listener = this.subscribeTo("progress:suite:start");
            this.emit("suite:start", null, 1);

            assert.calledOnce(listener);
            assert.match(listener.args[0][0], {
                client: { id: 1, browser: "Firefox" }
            });
        },

        "emits progress:suite:start event for all clients": function () {
            var listener = th