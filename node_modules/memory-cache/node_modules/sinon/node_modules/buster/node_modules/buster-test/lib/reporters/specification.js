var colorizer = require("ansi-colorizer");

function getOutputStream(opt) {
    if (opt.outputStream) { return opt.outputStream; }

    return {
        write: function (bytes) { process.stdout.write(bytes); }
    };
}

function filterStack(reporter, stack) {
    if (!stack) { return []; }
    if (reporter.stackFilter) {
        return reporter.stackFilter.filter(stack);
    }
    return stack.split("\n");
}

function printUnsupported(reporter, unsupported) {
    var str = "";

    for (var i = 0, l = unsupported.length; i < l; ++i) {
        str += "Skipping " + unsupported[i].context + ", unsupported requirement";

        if (unsupported[i].unsupported.length > 1) {
            str += "s:\n    " + unsupported[i].unsupported.join("\n    ") + "\n";
        } else {
            str += ": " + unsupported[i].unsupported[0] + "\n";
        }
    }

    reporter.write(reporter.color.yellow(str) + (!!str ? "\n" : ""));
}

function pluralize(num, phrase) {
    num = typeof num == "undefined" ? 0 : num;
    return num + " " + (num == 1 ? phrase : phrase + "s");
}

module.exports = {
    create: function (opt) {
        opt = opt || {};
        var reporter = Object.create(this);
        reporter.out = getOutputStream(opt);
        reporter.color = colorizer.configure(opt);
        reporter.stackFilter = opt.stackFilter;
        reporter.reset();
        reporter.contexts = [];
        return reporter;
    },

    listen: function (runner) {
        runner.bind(this);
        return this;
    },

    "suite:start": function () {
        this.startedAt = new Date();
    },

    "context:start": function (context) {
        if (this.contexts.length == 0) {
            this.write(context.name + "\n");
        }

        this.contexts.push(context.name);
    },

    "context:end": function (context) {
        this.contexts.pop();
    },

    "context:unsupported": function (data) {
        printUnsupported(this, [{
            context: this.contexts.concat([data.context.name]).join(" "),
            unsupported: data.unsupported
        }]);
    },

    "test:success": function (test) {
        this.write(this.color.green("  ✓ " + this.getPrefix() + test.name)+"\n");
        this.printMessages();
    },

    "test:failure": function (test) {
        var name = "", color = "red";

        if (test.error && test.error.name != "AssertionError") {
            name = test.error.name + ": ";
            color = "yellow";
        }

        this.write(this.color[color]("  ✖ " + this.getPrefix() + test.name) + "\n");
        this.printMessages();

        if (!test.error) {
            return;
        }

        this.write("    " + this.color[color](name + test.error.message) + "\n");
        var stack = filterStack(this, test.error.stack);

        if (stack.length > 0) {
            this.write("      " + stack.join("\n      ") + "\n");
        }
    },

    "test:deferred": function (test) {
        this.write(this.color.cyan("  - " + this.getPrefix() + test.name) + "\n");
    },

    "test:timeout": function (test) {
        this.write(this.color.red("  … " + this.getPrefix() + test.name) + "\n");
        var source = test.error && test.error.source;
        if (source) { this.write(" (" + test.error.source + ")" + "\n"); }
        this.printMessages();
    },

    log: function (msg) {
        this.messages = this.messages || [];
        this.messages.push(msg);
    },

    printMessages: function () {
        var messages = this.messages || [], level;

        for (var i = 0, l = messages.length; i < l; ++i) {
            level = messages[i].level.toUpperCase();
            this.write("    [" + level + "] " + messages[i].message + "\n");
        }

        if (messages.length > 0) {
            this.write("\n");
        }

        this.messages = [];
    },

    getPrefix: function () {
        var prefix = this.contexts.slice(1).join(" ");
        return prefix + (prefix.length > 0 ? " " : "");
    },

    "suite:end": function (stats) {
        this.printUncaughtExceptions();
        stats = stats || {};

        var statStr = [pluralize(stats.contexts, "test case"),
                       pluralize(stats.tests, "test"),
                       pluralize(stats.assertions, "assertion"),
                       pluralize(stats.failures, "failure"),
                       pluralize(stats.errors, "error"),
                       pluralize(stats.timeouts, "timeout")];

        if (stats.deferred > 0) {
            statStr.push(stats.deferred + " deferred");
        }

        if (stats.tests == 0) {
            this.write(this.color.red