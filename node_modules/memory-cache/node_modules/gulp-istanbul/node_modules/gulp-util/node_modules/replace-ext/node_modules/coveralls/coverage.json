make[1]: Entering directory `/home/cainus/percolator'
current_path:  DOES_NOT_EXIST mount_path:  browser
{
  "instrumentation": "node-jscoverage",
  "sloc": 567,
  "hits": 523,
  "misses": 44,
  "coverage": 92.23985890652557,
  "files": [
    {
      "filename": "CRUDCollection.js",
      "coverage": 94.20289855072464,
      "hits": 65,
      "misses": 4,
      "sloc": 69,
      "source": {
        "1": {
          "source": "var JSV = require('JSV').JSV;",
          "coverage": 1
        },
        "2": {
          "source": "var _ = require('underscore');",
          "coverage": 1
        },
        "3": {
          "source": "",
          "coverage": ""
        },
        "4": {
          "source": "var CRUDCollection = function(options){",
          "coverage": 1
        },
        "5": {
          "source": "",
          "coverage": ""
        },
        "6": {
          "source": "  if (!options || (!options.list &amp;&amp; !options.collectionGET)){",
          "coverage": 24
        },
        "7": {
          "source": "    throw \"the options parameter should have a list() or collectionGET() function.\";",
          "coverage": 1
        },
        "8": {
          "source": "  }",
          "coverage": ""
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "  // TODO: list() array or object",
          "coverage": ""
        },
        "11": {
          "source": "  if (options.create &amp;&amp; !options.createSchema &amp;&amp; !!options.schema){",
          "coverage": 23
        },
        "12": {
          "source": "    options.createSchema = options.schema;",
          "coverage": 2
        },
        "13": {
          "source": "  }",
          "coverage": ""
        },
        "14": {
          "source": "  if (!options.updateSchema &amp;&amp; !!options.schema){",
          "coverage": 23
        },
        "15": {
          "source": "    options.updateSchema = options.schema;",
          "coverage": 4
        },
        "16": {
          "source": "  }",
          "coverage": ""
        },
        "17": {
          "source": "  if (!options.update &amp;&amp; !options.upsert){",
          "coverage": 23
        },
        "18": {
          "source": "    delete options.updateSchema; // if there's no update(), we ignore any updateSchema",
          "coverage": 18
        },
        "19": {
          "source": "  }",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "  var outputList = function(req, res, list, key){",
          "coverage": 23
        },
        "22": {
          "source": "    var collection = res.collection(list, key);",
          "coverage": 3
        },
        "23": {
          "source": "    if (req.app.autoLink){",
          "coverage": 3
        },
        "24": {
          "source": "      collection = collection.linkEach('self', function(item, name){",
          "coverage": 3
        },
        "25": {
          "source": "        if (!!key){",
          "coverage": 0
        },
        "26": {
          "source": "          return req.uri.child(item[key]);  // allow 'options' to provide another key to link on.",
          "coverage": 0
        },
        "27": {
          "source": "        } else {",
          "coverage": ""
        },
        "28": {
          "source": "          return req.uri.child(name);",
          "coverage": 0
        },
        "29": {
          "source": "        }",
          "coverage": ""
        },
        "30": {
          "source": "      });",
          "coverage": ""
        },
        "31": {
          "source": "    }",
          "coverage": ""
        },
        "32": {
          "source": "    if (!!options.createSchema &amp;&amp; req.app.autoLink){",
          "coverage": 3
        },
        "33": {
          "source": "      collection = collection.link('create',",
          "coverage": 2
        },
        "34": {
          "source": "                                   req.uri.query(false),",
          "coverage": ""
        },
        "35": {
          "source": "                                   { method : 'POST',",
          "coverage": ""
        },
        "36": {
          "source": "                                     schema : options.createSchema});",
          "coverage": ""
        },
        "37": {
          "source": "    }",
          "coverage": ""
        },
        "38": {
          "source": "    collection.send();",
          "coverage": 3
        },
        "39": {
          "source": "  };",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "  this.handler = {",
          "coverage": 23
        },
        "42": {
          "source": "    GET : function(req, res){",
          "coverage": ""
        },
        "43": {
          "source": "      options.list(req, res, function(err, items, options){",
          "coverage": 3
        },
        "44": {
          "source": "        if (!!err){",
          "coverage": 3
        },
        "45": {
          "source": "          return res.status.internalServerError(err);",
          "coverage": 0
        },
        "46": {
          "source": "        }",
          "coverage": ""
        },
        "47": {
          "source": "        outputList(req, res, items, options);",
          "coverage": 3
        },
        "48": {
          "source": "      });",
          "coverage": ""
        },
        "49": {
          "source": "    }",
          "coverage": ""
        },
        "50": {
          "source": "  };",
          "coverage": ""
        },
        "51": {
          "source": "",
          "coverage": ""
        },
        "52": {
          "source": "  if (!!options.create){",
          "coverage": 23
        },
        "53": {
          "source": "    this.handler.POST = function(req, res){",
          "coverage": 4
        },
        "54": {
          "source": "      req.onJson(options.createSchema, function(err, obj){",
          "coverage": 2
        },
        "55": {
          "source": "        options.create(req, res, obj, function(){",
          "coverage": 2
        },
        "56": {
          "source": "          return res.status.created(req.uri);",
          "coverage": 1
        },
        "57": {
          "source": "        });",
          "coverage": ""
        },
        "58": {
          "source": "      });",
          "coverage": ""
        },
        "59": {
          "source": "    };",
          "coverage": ""
        },
        "60": {
          "source": "  }",
          "coverage": ""
        },
        "61": {
          "source": "",
          "coverage": ""
        },
        "62": {
          "source": "  this.wildcard = { };",
          "coverage": 23
        },
        "63": {
          "source": "",
          "coverage": ""
        },
        "64": {
          "source": "  if (!!options.fetch){",
          "coverage": 23
        },
        "65": {
          "source": "    this.wildcard.fetch = options.fetch;",
          "coverage": 6
        },
        "66": {
          "source": "    this.wildcard.GET = function(req, res){",
          "coverage": 6
        },
        "67": {
          "source": "      var resource = res.object(req.fetched);",
          "coverage": 5
        },
        "68": {
          "source": "      if ((!!options.update || !!options.upsert) &amp;&amp; (req.app.autoLink)){",
          "coverage": 5
        },
        "69": {
          "source": "        resource.link( \"update\", req.uri, {method : 'PUT', schema : options.updateSchema});",
          "coverage": 1
        },
        "70": {
          "source": "      }",
          "coverage": ""
        },
        "71": {
          "source": "      if (!!options.destroy &amp;&amp; req.app.autoLink){",
          "coverage": 5
        },
        "72": {
          "source": "        resource.link( \"delete\", req.uri, {method : 'DELETE'});",
          "coverage": 1
        },
        "73": {
          "source": "      }",
          "coverage": ""
        },
        "74": {
          "source": "      resource.send();",
          "coverage": 5
        },
        "75": {
          "source": "    };",
          "coverage": ""
        },
        "76": {
          "source": "  }",
          "coverage": ""
        },
        "77": {
          "source": "",
          "coverage": ""
        },
        "78": {
          "source": "  // UPDATE",
          "coverage": ""
        },
        "79": {
          "source": "  if (!!options.update){",
          "coverage": 23
        },
        "80": {
          "source": "    this.wildcard.fetchOnPUT = true;",
          "coverage": 3
        },
        "81": {
          "source": "    this.wildcard.PUT = function(req, res){",
          "coverage": 3
        },
        "82": {
          "source": "      req.onJson(options.updateSchema, function(err, obj){",
          "coverage": 2
        },
        "83": {
          "source": "        var id = req.uri.child();",
          "coverage": 2
        },
        "84": {
          "source": "        options.update(req, res, id, obj, function(){",
          "coverage": 2
        },
        "85": {
          "source": "          res.setHeader('Location', req.uri);",
          "coverage": 1
        },
        "86": {
          "source": "          res.writeHead(303);",
          "coverage": 1
        },
        "87": {
          "source": "          return res.end();",
          "coverage": 1
        },
        "88": {
          "source": "        });",
          "coverage": ""
        },
        "89": {
          "source": "      });",
          "coverage": ""
        },
        "90": {
          "source": "    };",
          "coverage": ""
        },
        "91": {
          "source": "  }",
          "coverage": ""
        },
        "92": {
          "source": "",
          "coverage": ""
        },
        "93": {
          "source": "  // UPSERT",
          "coverage": ""
        },
        "94": {
          "source": "  if (!!options.upsert){",
          "coverage": 23
        },
        "95": {
          "source": "    // fetch is not used here, because this is for create as well as update",
          "coverage": ""
        },
        "96": {
          "source": "    this.wildcard.fetchOnPUT = false;",
          "coverage": 2
        },
        "97": {
          "source": "",
          "coverage": ""
        },
        "98": {
          "source": "    this.wildcard.PUT = function(req, res){",
          "coverage": 2
        },
        "99": {
          "source": "      req.onJson(options.updateSchema, function(err, obj){",
          "coverage": 2
        },
        "100": {
          "source": "        var id = req.uri.child();",
          "coverage": 2
        },
        "101": {
          "source": "        options.upsert(req, res, id, obj, function(){",
          "coverage": 2
        },
        "102": {
          "source": "          res.setHeader('Location', req.uri);",
          "coverage": 1
        },
        "103": {
          "source": "          res.writeHead(303);",
          "coverage": 1
        },
        "104": {
          "source": "          return res.end();",
          "coverage": 1
        },
        "105": {
          "source": "        });",
          "coverage": ""
        },
        "106": {
          "source": "      });",
          "coverage": ""
        },
        "107": {
          "source": "    };",
          "coverage": ""
        },
        "108": {
          "source": "  }",
          "coverage": ""
        },
        "109": {
          "source": "",
          "coverage": ""
        },
        "110": {
          "source": "  // DESTROY",
          "coverage": ""
        },
        "111": {
          "source": "  if (!!options.destroy){",
          "coverage": 23
        },
        "112": {
          "source": "    this.wildcard.DELETE = function(req, res){",
          "coverage": 3
        },
        "113": {
          "source": "      options.destroy(req, res, req.uri.child(), function(){",
          "coverage": 2
        },
        "114": {
          "source": "        res.writeHead(204);",
          "coverage": 1
        },
        "115": {
          "source": "        res.end();",
          "coverage": 1
        },
        "116": {
          "source": "      });",
          "coverage": ""
        },
        "117": {
          "source": "    };",
          "coverage": ""
        },
        "118": {
          "source": "  }",
          "coverage": ""
        },
        "119": {
          "source": "",
          "coverage": ""
        },
        "120": {
          "source": "  if (!!options.collectionGET){",
          "coverage": 23
        },
        "121": {
          "source": "    this.handler.GET = options.collectionGET;",
          "coverage": 1
        },
        "122": {
          "source": "  }",
          "coverage": ""
        },
        "123": {
          "source": "",
          "coverage": ""
        },
        "124": {
          "source": "  if (!!options.memberGET){",
          "coverage": 23
        },
        "125": {
          "source": "    this.wildcard.GET = options.memberGET;",
          "coverage": 1
        },
        "126": {
          "source": "  }",
          "coverage": ""
        },
        "127": {
          "source": "",
          "coverage": ""
        },
        "128": {
          "source": "};",
          "coverage": ""
        },
        "129": {
          "source": "module.exports = CRUDCollection;",
          "coverage": 1
        }
      }
    },
    {
      "filename": "ContextFaker.js",
      "coverage": 86.27450980392157,
      "hits": 88,
      "misses": 14,
      "sloc": 102,
      "source": {
        "1": {
          "source": "var assert = require('assert');",
          "coverage": 1
        },
        "2": {
          "source": "var nodeUrl = require('url');",
          "coverage": 1
        },
        "3": {
          "source": "var urlgrey = require('urlgrey');",
          "coverage": 1
        },
        "4": {
          "source": "var StatusManager = require('../index').StatusManager;",
          "coverage": 1
        },
        "5": {
          "source": "var ObjectHelper = require('../index').ObjectHelper;",
          "coverage": 1
        },
        "6": {
          "source": "var FetchHelper = require('../index').FetchHelper;",
          "coverage": 1
        },
        "7": {
          "source": "var _ = require('underscore');",
          "coverage": 1
        },
        "8": {
          "source": "var detour = require('detour');",
          "coverage": 1
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "var ContextFaker = function(method, url, headers, body){",
          "coverage": 1
        },
        "11": {
          "source": "  this._method = method || 'GET';",
          "coverage": 9
        },
        "12": {
          "source": "  this._url = url || '/';",
          "coverage": 9
        },
        "13": {
          "source": "  this._headers = headers || {};",
          "coverage": 9
        },
        "14": {
          "source": "  this._body = body || '';",
          "coverage": 9
        },
        "15": {
          "source": "  this.expect = this._expectObject();",
          "coverage": 9
        },
        "16": {
          "source": "  this.expectations = {};",
          "coverage": 9
        },
        "17": {
          "source": "  this._refreshFake();",
          "coverage": 9
        },
        "18": {
          "source": "  this.$ = {};",
          "coverage": 9
        },
        "19": {
          "source": "};",
          "coverage": ""
        },
        "20": {
          "source": "",
          "coverage": ""
        },
        "21": {
          "source": "ContextFaker.prototype._refreshFake = function(){",
          "coverage": 1
        },
        "22": {
          "source": "  this.$ = new ContextFake(this._method,",
          "coverage": 21
        },
        "23": {
          "source": "                              this._url,",
          "coverage": ""
        },
        "24": {
          "source": "                              this._headers,",
          "coverage": ""
        },
        "25": {
          "source": "                              this._body,",
          "coverage": ""
        },
        "26": {
          "source": "                              this.expectations,",
          "coverage": ""
        },
        "27": {
          "source": "                              this.done);",
          "coverage": ""
        },
        "28": {
          "source": "  this.req = this.$.req;",
          "coverage": 21
        },
        "29": {
          "source": "  this.res = this.$.res;",
          "coverage": 21
        },
        "30": {
          "source": "};",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "ContextFaker.prototype.route = function(module, done){",
          "coverage": 1
        },
        "33": {
          "source": "  var req = this.req;",
          "coverage": 9
        },
        "34": {
          "source": "  var res = this.res;",
          "coverage": 9
        },
        "35": {
          "source": "  var body = this._body;",
          "coverage": 9
        },
        "36": {
          "source": "  this.$.done = done;",
          "coverage": 9
        },
        "37": {
          "source": "  FetchHelper(req, res, module, function(){",
          "coverage": 9
        },
        "38": {
          "source": "    module[req.method](req, res);",
          "coverage": 7
        },
        "39": {
          "source": "    req.end(body);",
          "coverage": 7
        },
        "40": {
          "source": "  });",
          "coverage": ""
        },
        "41": {
          "source": "};",
          "coverage": ""
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "ContextFaker.prototype.headers = function(headers){",
          "coverage": 1
        },
        "44": {
          "source": "  this._headers = headers;",
          "coverage": 1
        },
        "45": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "46": {
          "source": "  return this;",
          "coverage": 1
        },
        "47": {
          "source": "};",
          "coverage": ""
        },
        "48": {
          "source": "ContextFaker.prototype.header = function(name, value){",
          "coverage": 1
        },
        "49": {
          "source": "  this._headers[name] = value;",
          "coverage": 1
        },
        "50": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "51": {
          "source": "  return this;",
          "coverage": 1
        },
        "52": {
          "source": "};",
          "coverage": ""
        },
        "53": {
          "source": "ContextFaker.prototype.url = function(url){",
          "coverage": 1
        },
        "54": {
          "source": "  this._url = url;",
          "coverage": 9
        },
        "55": {
          "source": "  this._refreshFake();",
          "coverage": 9
        },
        "56": {
          "source": "  return this;",
          "coverage": 9
        },
        "57": {
          "source": "};",
          "coverage": ""
        },
        "58": {
          "source": "ContextFaker.prototype.method = function(method){",
          "coverage": 1
        },
        "59": {
          "source": "  this._method = method;",
          "coverage": 0
        },
        "60": {
          "source": "  this._refreshFake();",
          "coverage": 0
        },
        "61": {
          "source": "  return this;",
          "coverage": 0
        },
        "62": {
          "source": "};",
          "coverage": ""
        },
        "63": {
          "source": "ContextFaker.prototype.body = function(thebody){",
          "coverage": 1
        },
        "64": {
          "source": "  this._body = thebody;",
          "coverage": 1
        },
        "65": {
          "source": "  this._refreshFake();",
          "coverage": 1
        },
        "66": {
          "source": "  return this;",
          "coverage": 1
        },
        "67": {
          "source": "};",
          "coverage": ""
        },
        "68": {
          "source": "",
          "coverage": ""
        },
        "69": {
          "source": "ContextFaker.prototype._expectObject = function(){",
          "coverage": 1
        },
        "70": {
          "source": "  var faker = this;",
          "coverage": 9
        },
        "71": {
          "source": "  return {",
          "coverage": 9
        },
        "72": {
          "source": "    statusCode : function(code){",
          "coverage": ""
        },
        "73": {
          "source": "      faker.expectations.statusCode = code;",
          "coverage": 0
        },
        "74": {
          "source": "      return faker;",
          "coverage": 0
        },
        "75": {
          "source": "    },",
          "coverage": ""
        },
        "76": {
          "source": "    body : function(bodyVal){",
          "coverage": ""
        },
        "77": {
          "source": "      faker.expectations.body = bodyVal;",
          "coverage": 0
        },
        "78": {
          "source": "      return faker;",
          "coverage": 0
        },
        "79": {
          "source": "    },",
          "coverage": ""
        },
        "80": {
          "source": "    header : function(name, value){",
          "coverage": ""
        },
        "81": {
          "source": "      faker.expectations.headers[name] = value;",
          "coverage": 0
        },
        "82": {
          "source": "      return faker;",
          "coverage": 0
        },
        "83": {
          "source": "    }",
          "coverage": ""
        },
        "84": {
          "source": "  };",
          "coverage": ""
        },
        "85": {
          "source": "};",
          "coverage": ""
        },
        "86": {
          "source": "",
          "coverage": ""
        },
        "87": {
          "source": "var ContextFake = function(method, url, headers, body, expectations){",
          "coverage": 1
        },
        "88": {
          "source": "  var fake = this;",
          "coverage": 21
        },
        "89": {
          "source": "  var parsedUrl = nodeUrl.parse(url);",
          "coverage": 21
        },
        "90": {
          "source": "  var protocol = 'http';",
          "coverage": 21
        },
        "91": {
          "source": "  if (parsedUrl.protocol){",
          "coverage": 21
        },
        "92": {
          "source": "    this.protocol = parsedUrl.protocol.slice(0, -1);",
          "coverage": 0
        },
        "93": {
          "source": "    // remove trailing ':'",
          "coverage": ""
        },
        "94": {
          "source": "  }",
          "coverage": ""
        },
        "95": {
          "source": "  var hostname = parsedUrl.hostname || 'localhost';",
          "coverage": 21
        },
        "96": {
          "source": "  var port = parsedUrl.port || 80;",
          "coverage": 21
        },
        "97": {
          "source": "  this.router = {",
          "coverage": 21
        },
        "98": {
          "source": "  };  ",
          "coverage": ""
        },
        "99": {
          "source": "  this.done = function(){};",
          "coverage": 21
        },
        "100": {
          "source": "  var endHandler = function(){};",
          "coverage": 21
        },
        "101": {
          "source": "  var dataHandler = function(){};",
          "coverage": 21
        },
        "102": {
          "source": "  this.req = {",
          "coverage": 21
        },
        "103": {
          "source": "    app : {},",
          "coverage": ""
        },
        "104": {
          "source": "    headers : headers,",
          "coverage": ""
        },
        "105": {
          "source": "    method : method,",
          "coverage": ""
        },
        "106": {
          "source": "    url : url,",
          "coverage": ""
        },
        "107": {
          "source": "    uri : urlgrey(url),",
          "coverage": ""
        },
        "108": {
          "source": "    resume : function(){},",
          "coverage": ""
        },
        "109": {
          "source": "    on : function(eventName, cb){",
          "coverage": ""
        },
        "110": {
          "source": "      if (eventName === 'data'){",
          "coverage": 2
        },
        "111": {
          "source": "        dataHandler = cb;",
          "coverage": 1
        },
        "112": {
          "source": "      }",
          "coverage": ""
        },
        "113": {
          "source": "      if (eventName === 'end'){",
          "coverage": 2
        },
        "114": {
          "source": "        endHandler = cb;",
          "coverage": 1
        },
        "115": {
          "source": "      }",
          "coverage": ""
        },
        "116": {
          "source": "    },",
          "coverage": ""
        },
        "117": {
          "source": "    write : function(data){",
          "coverage": ""
        },
        "118": {
          "source": "      dataHandler(data);",
          "coverage": 0
        },
        "119": {
          "source": "    },",
          "coverage": ""
        },
        "120": {
          "source": "    end : function(data){",
          "coverage": ""
        },
        "121": {
          "source": "      endHandler(data);",
          "coverage": 7
        },
        "122": {
          "source": "    }",
          "coverage": ""
        },
        "123": {
          "source": "  };",
          "coverage": ""
        },
        "124": {
          "source": "  this.actual = {};",
          "coverage": 21
        },
        "125": {
          "source": "  this.actual.body = '';",
          "coverage": 21
        },
        "126": {
          "source": "  this.actual.headers = {};",
          "coverage": 21
        },
        "127": {
          "source": "  this.res = {",
          "coverage": 21
        },
        "128": {
          "source": "    writeHead : function(statusCode, reasonPhrase, headers){",
          "coverage": ""
        },
        "129": {
          "source": "      fake.res.statusCode = statusCode;",
          "coverage": 2
        },
        "130": {
          "source": "      fake.actual.statusCode = statusCode;",
          "coverage": 2
        },
        "131": {
          "source": "      fake.actual.headers = _.extend(fake.actual.headers, headers);",
          "coverage": 2
        },
        "132": {
          "source": "    },",
          "coverage": ""
        },
        "133": {
          "source": "    setHeader : function(name, value){",
          "coverage": ""
        },
        "134": {
          "source": "      fake.actual.headers[name] = value;",
          "coverage": 8
        },
        "135": {
          "source": "    },",
          "coverage": ""
        },
        "136": {
          "source": "    statusCode : 200,",
          "coverage": ""
        },
        "137": {
          "source": "    write : function(data, encoding){",
          "coverage": ""
        },
        "138": {
          "source": "      fake.actual.body += data;",
          "coverage": 0
        },
        "139": {
          "source": "    },",
          "coverage": ""
        },
        "140": {
          "source": "    end : function(data, encoding){",
          "coverage": ""
        },
        "141": {
          "source": "      fake.actual.statusCode = fake.res.statusCode;",
          "coverage": 9
        },
        "142": {
          "source": "      if (data){",
          "coverage": 9
        },
        "143": {
          "source": "        fake.actual.body += data;",
          "coverage": 9
        },
        "144": {
          "source": "      }",
          "coverage": ""
        },
        "145": {
          "source": "      fake.validate();",
          "coverage": 9
        },
        "146": {
          "source": "      if (fake.done){",
          "coverage": 9
        },
        "147": {
          "source": "        fake.done(fake.actual);",
          "coverage": 9
        },
        "148": {
          "source": "      }",
          "coverage": ""
        },
        "149": {
          "source": "    }",
          "coverage": ""
        },
        "150": {
          "source": "  };",
          "coverage": ""
        },
        "151": {
          "source": "  ObjectHelper(this.req, this.res);",
          "coverage": 21
        },
        "152": {
          "source": "  this.res.status = (new StatusManager()).createResponder(this.req, this.res);",
          "coverage": 21
        },
        "153": {
          "source": "  this.res.status.on('error', function(data){ /* do nothing */});",
          "coverage": 21
        },
        "154": {
          "source": "  this.res.status.emit = function(){};  // swallow events",
          "coverage": 21
        },
        "155": {
          "source": "  //TODO can validate() be hidden?  it's only called from res.end() right?",
          "coverage": ""
        },
        "156": {
          "source": "  // does it ever need to be called explicitly?",
          "coverage": ""
        },
        "157": {
          "source": "  this.validate = function(){",
          "coverage": 21
        },
        "158": {
          "source": "    if (expectations.statusCode){",
          "coverage": 9
        },
        "159": {
          "source": "      assert.equal(this.res.statusCode,",
          "coverage": 0
        },
        "160": {
          "source": "                   expectations.statusCode,",
          "coverage": ""
        },
        "161": {
          "source": "                   \"response statusCode should have been \" +",
          "coverage": ""
        },
        "162": {
          "source": "                     expectations.statusCode +",
          "coverage": ""
        },
        "163": {
          "source": "                     \" but was \" +",
          "coverage": ""
        },
        "164": {
          "source": "                     this.res.statusCode",
          "coverage": ""
        },
        "165": {
          "source": "                     );",
          "coverage": ""
        },
        "166": {
          "source": "    }",
          "coverage": ""
        },
        "167": {
          "source": "    if (expectations.body){",
          "coverage": 9
        },
        "168": {
          "source": "      assert.equal(this.actual.body,",
          "coverage": 0
        },
        "169": {
          "source": "                   expectations.body,",
          "coverage": ""
        },
        "170": {
          "source": "                   \"response body should have been: \\n \" +",
          "coverage": ""
        },
        "171": {
          "source": "                     expectations.body +",
          "coverage": ""
        },
        "172": {
          "source": "                     \"\\n\\n ...but was: \\n\" +",
          "coverage": ""
        },
        "173": {
          "source": "                     this.actual.body + \"\\n\\n\"",
          "coverage": ""
        },
        "174": {
          "source": "                     );",
          "coverage": ""
        },
        "175": {
          "source": "    }",
          "coverage": ""
        },
        "176": {
          "source": "  };",
          "coverage": ""
        },
        "177": {
          "source": "};",
          "coverage": ""
        },
        "178": {
          "source": "",
          "coverage": ""
        },
        "179": {
          "source": "module.exports = ContextFaker;",
          "coverage": 1
        },
        "180": {
          "source": "",
          "coverage": ""
        },
        "181": {
          "source": "",
          "coverage": ""
        },
        "182": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/Authenticate.js",
      "coverage": 100,
      "hits": 11,
      "misses": 0,
      "sloc": 11,
      "source": {
        "1": {
          "source": "",
          "coverage": ""
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var AuthenticateHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "4": {
          "source": "  //  if handler has an authenticate defined, call it.",
          "coverage": ""
        },
        "5": {
          "source": "  if (!!handler.authenticate &amp;&amp; (typeof(handler.authenticate) == 'function')){",
          "coverage": 19
        },
        "6": {
          "source": "    handler.authenticate(req, res, function(err, authenticated){",
          "coverage": 4
        },
        "7": {
          "source": "      if (err === true){",
          "coverage": 3
        },
        "8": {
          "source": "        // if it returns an error, throw a 401",
          "coverage": ""
        },
        "9": {
          "source": "        return res.status.unauthenticated();",
          "coverage": 1
        },
        "10": {
          "source": "      }",
          "coverage": ""
        },
        "11": {
          "source": "      if (!!err){",
          "coverage": 2
        },
        "12": {
          "source": "        return res.status.internalServerError(err);",
          "coverage": 1
        },
        "13": {
          "source": "      }",
          "coverage": ""
        },
        "14": {
          "source": "      // if it returns an object set handler.authenticated",
          "coverage": ""
        },
        "15": {
          "source": "      req.authenticated = authenticated;",
          "coverage": 1
        },
        "16": {
          "source": "      cb();  // no error",
          "coverage": 1
        },
        "17": {
          "source": "    });",
          "coverage": ""
        },
        "18": {
          "source": "  } else {",
          "coverage": ""
        },
        "19": {
          "source": "    cb();  // no error if no authenticate()",
          "coverage": 15
        },
        "20": {
          "source": "  }",
          "coverage": ""
        },
        "21": {
          "source": "};",
          "coverage": ""
        },
        "22": {
          "source": "",
          "coverage": ""
        },
        "23": {
          "source": "",
          "coverage": ""
        },
        "24": {
          "source": "module.exports = AuthenticateHelper;",
          "coverage": 1
        },
        "25": {
          "source": "",
          "coverage": ""
        },
        "26": {
          "source": "",
          "coverage": ""
        },
        "27": {
          "source": "",
          "coverage": ""
        },
        "28": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/BasicAuthenticate.js",
      "coverage": 100,
      "hits": 22,
      "misses": 0,
      "sloc": 22,
      "source": {
        "1": {
          "source": "",
          "coverage": ""
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "var BasicAuthenticateContextHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "4": {
          "source": "  //  if handler has a basicAuthenticate defined, call it.",
          "coverage": ""
        },
        "5": {
          "source": "  if (!!handler.basicAuthenticate &amp;&amp; (typeof(handler.basicAuthenticate) == 'function')){",
          "coverage": 7
        },
        "6": {
          "source": "    var header = req.headers.authorization;",
          "coverage": 6
        },
        "7": {
          "source": "",
          "coverage": ""
        },
        "8": {
          "source": "    if (!header){",
          "coverage": 6
        },
        "9": {
          "source": "      return unauthenticated(res);",
          "coverage": 1
        },
        "10": {
          "source": "    }",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "    var pieces = header.split(\" \");",
          "coverage": 5
        },
        "13": {
          "source": "    var scheme = pieces[0];",
          "coverage": 5
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "    if (scheme !== 'Basic'){",
          "coverage": 5
        },
        "16": {
          "source": "      return unauthenticated(res);",
          "coverage": 1
        },
        "17": {
          "source": "    }",
          "coverage": ""
        },
        "18": {
          "source": "    var credentials = new Buffer(pieces[1], 'base64').toString('utf8').split(\":\");",
          "coverage": 4
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "    handler.basicAuthenticate(credentials[0], credentials[1], req, res, function(err, authenticated){",
          "coverage": 4
        },
        "21": {
          "source": "      if (err === true){",
          "coverage": 3
        },
        "22": {
          "source": "        // if it returns an error, throw a 401",
          "coverage": ""
        },
        "23": {
          "source": "        return unauthenticated(res);",
          "coverage": 1
        },
        "24": {
          "source": "      }",
          "coverage": ""
        },
        "25": {
          "source": "      if (!!err){",
          "coverage": 2
        },
        "26": {
          "source": "        return res.status.internalServerError(err);",
          "coverage": 1
        },
        "27": {
          "source": "      }",
          "coverage": ""
        },
        "28": {
          "source": "      // if it returns an object set handler.authenticated",
          "coverage": ""
        },
        "29": {
          "source": "      req.authenticated = authenticated;",
          "coverage": 1
        },
        "30": {
          "source": "      cb();  // no error",
          "coverage": 1
        },
        "31": {
          "source": "    });",
          "coverage": ""
        },
        "32": {
          "source": "  } else {",
          "coverage": ""
        },
        "33": {
          "source": "    cb();  // no error if no authenticate()",
          "coverage": 1
        },
        "34": {
          "source": "  }",
          "coverage": ""
        },
        "35": {
          "source": "};",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "module.exports = BasicAuthenticateContextHelper;",
          "coverage": 1
        },
        "39": {
          "source": "",
          "coverage": ""
        },
        "40": {
          "source": "var unauthenticated = function(res){",
          "coverage": 1
        },
        "41": {
          "source": "    res.setHeader('WWW-Authenticate', 'Basic');",
          "coverage": 3
        },
        "42": {
          "source": "    res.status.unauthenticated({scheme : 'Basic'});",
          "coverage": 3
        },
        "43": {
          "source": "};",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        },
        "46": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/Fetch.js",
      "coverage": 100,
      "hits": 13,
      "misses": 0,
      "sloc": 13,
      "source": {
        "1": {
          "source": "/*",
          "coverage": ""
        },
        "2": {
          "source": "",
          "coverage": ""
        },
        "3": {
          "source": "The purpose of the fetch helper is to use ",
          "coverage": ""
        },
        "4": {
          "source": "a resource-defined fetch() method and automatically retrieve",
          "coverage": ""
        },
        "5": {
          "source": "the requested data, or show appropriate error messages.",
          "coverage": ""
        },
        "6": {
          "source": "",
          "coverage": ""
        },
        "7": {
          "source": "If fetch() is not defined on the resource, there will be no ",
          "coverage": ""
        },
        "8": {
          "source": "effect all.",
          "coverage": ""
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": "If you find that you want to do your own error handling, this",
          "coverage": ""
        },
        "11": {
          "source": "helper is probably unnecessary as it will do little ",
          "coverage": ""
        },
        "12": {
          "source": "else other than setting req.fetched for you.",
          "coverage": ""
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": "*/",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "",
          "coverage": ""
        },
        "18": {
          "source": "var FetchHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "19": {
          "source": "",
          "coverage": ""
        },
        "20": {
          "source": "  if (!req.fetched &amp;&amp; !!handler.fetch &amp;&amp; (typeof(handler.fetch) == 'function')){",
          "coverage": 29
        },
        "21": {
          "source": "    if (req.method !== \"PUT\" || handler.fetchOnPUT !== false){",
          "coverage": 8
        },
        "22": {
          "source": "      handler.fetch(req, res, function(err, fetched){",
          "coverage": 7
        },
        "23": {
          "source": "        if (err === true){",
          "coverage": 6
        },
        "24": {
          "source": "          // if it returns an error, throw a 404",
          "coverage": ""
        },
        "25": {
          "source": "          return res.status.notFound(req.url);",
          "coverage": 2
        },
        "26": {
          "source": "        }",
          "coverage": ""
        },
        "27": {
          "source": "        if (!!err){",
          "coverage": 4
        },
        "28": {
          "source": "          return res.status.internalServerError(err);",
          "coverage": 2
        },
        "29": {
          "source": "        }",
          "coverage": ""
        },
        "30": {
          "source": "        req.fetched = fetched;",
          "coverage": 2
        },
        "31": {
          "source": "        return cb();",
          "coverage": 2
        },
        "32": {
          "source": "      });",
          "coverage": ""
        },
        "33": {
          "source": "    } else {",
          "coverage": ""
        },
        "34": {
          "source": "      return cb();",
          "coverage": 1
        },
        "35": {
          "source": "    }",
          "coverage": ""
        },
        "36": {
          "source": "  } else {",
          "coverage": ""
        },
        "37": {
          "source": "    return cb();",
          "coverage": 21
        },
        "38": {
          "source": "  }",
          "coverage": ""
        },
        "39": {
          "source": "};",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        },
        "41": {
          "source": "module.exports = FetchHelper;",
          "coverage": 1
        },
        "42": {
          "source": "",
          "coverage": ""
        },
        "43": {
          "source": "",
          "coverage": ""
        },
        "44": {
          "source": "",
          "coverage": ""
        },
        "45": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/Object.js",
      "coverage": 53.57142857142857,
      "hits": 15,
      "misses": 13,
      "sloc": 28,
      "source": {
        "1": {
          "source": "/*",
          "coverage": ""
        },
        "2": {
          "source": " This helper adds a object function to the",
          "coverage": ""
        },
        "3": {
          "source": " object and callsback when done.",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": " The json function takes json object, and allows you to",
          "coverage": ""
        },
        "6": {
          "source": "manipulate it in various ways, and either send it as",
          "coverage": ""
        },
        "7": {
          "source": "a response ( .send() ), return it as a string ",
          "coverage": ""
        },
        "8": {
          "source": "( .toString() ), or return it as an object ( .toObject() ).",
          "coverage": ""
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": " */",
          "coverage": ""
        },
        "11": {
          "source": "",
          "coverage": ""
        },
        "12": {
          "source": "var HyperJson = require('../HyperJson');",
          "coverage": 1
        },
        "13": {
          "source": "var HyperJsonCollection = require('../HyperJsonCollection');",
          "coverage": 1
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": "var ObjectHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "16": {
          "source": "  res.object = function(obj){",
          "coverage": 35
        },
        "17": {
          "source": "    var json = new HyperJson(obj);",
          "coverage": 6
        },
        "18": {
          "source": "    json.send = function(){send(req, res, json);};",
          "coverage": 12
        },
        "19": {
          "source": "    return json;",
          "coverage": 6
        },
        "20": {
          "source": "  };",
          "coverage": ""
        },
        "21": {
          "source": "  res.collection = function(objArr, key){",
          "coverage": 35
        },
        "22": {
          "source": "    var json = new HyperJsonCollection(objArr, key);",
          "coverage": 0
        },
        "23": {
          "source": "    json.send = function(){send(req, res, json);};",
          "coverage": 0
        },
        "24": {
          "source": "    return json;",
          "coverage": 0
        },
        "25": {
          "source": "  };",
          "coverage": ""
        },
        "26": {
          "source": "  if (cb){",
          "coverage": 35
        },
        "27": {
          "source": "    cb();",
          "coverage": 0
        },
        "28": {
          "source": "  }",
          "coverage": ""
        },
        "29": {
          "source": "};",
          "coverage": ""
        },
        "30": {
          "source": "",
          "coverage": ""
        },
        "31": {
          "source": "",
          "coverage": ""
        },
        "32": {
          "source": "module.exports = ObjectHelper;",
          "coverage": 1
        },
        "33": {
          "source": "",
          "coverage": ""
        },
        "34": {
          "source": "function send(req, res, json){",
          "coverage": 1
        },
        "35": {
          "source": "  if (req.app.autoLink){",
          "coverage": 6
        },
        "36": {
          "source": "    addDefaultLinks(req, res, json);",
          "coverage": 0
        },
        "37": {
          "source": "  }",
          "coverage": ""
        },
        "38": {
          "source": "  res.setHeader('content-type', 'application/json');",
          "coverage": 6
        },
        "39": {
          "source": "  res.end(json.toString());",
          "coverage": 6
        },
        "40": {
          "source": "}",
          "coverage": ""
        },
        "41": {
          "source": "",
          "coverage": ""
        },
        "42": {
          "source": "function addDefaultLinks(req, res, json){",
          "coverage": 1
        },
        "43": {
          "source": "  var current = json.toObject();",
          "coverage": 0
        },
        "44": {
          "source": "  if (!current._links || !current._links.parent){",
          "coverage": 0
        },
        "45": {
          "source": "    try {",
          "coverage": 0
        },
        "46": {
          "source": "      var parent = req.uri.parent();",
          "coverage": 0
        },
        "47": {
          "source": "      json.link('parent', parent);",
          "coverage": 0
        },
        "48": {
          "source": "    } catch(ex){",
          "coverage": ""
        },
        "49": {
          "source": "      if (ex.message !== \"The given path has no parent path\"){",
          "coverage": 0
        },
        "50": {
          "source": "        throw ex;",
          "coverage": 0
        },
        "51": {
          "source": "      }",
          "coverage": ""
        },
        "52": {
          "source": "    }",
          "coverage": ""
        },
        "53": {
          "source": "  }",
          "coverage": ""
        },
        "54": {
          "source": "  return current;",
          "coverage": 0
        },
        "55": {
          "source": "}",
          "coverage": ""
        },
        "56": {
          "source": "",
          "coverage": ""
        },
        "57": {
          "source": "",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/onBody.js",
      "coverage": 100,
      "hits": 12,
      "misses": 0,
      "sloc": 12,
      "source": {
        "1": {
          "source": "/*",
          "coverage": ""
        },
        "2": {
          "source": " This helper just adds an onBody function to the",
          "coverage": ""
        },
        "3": {
          "source": " req and calls back when done.",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": " The onBody function takes a callback in the form",
          "coverage": ""
        },
        "6": {
          "source": " function(err, body){ ...",
          "coverage": ""
        },
        "7": {
          "source": " where error is an error that may have occurred and body",
          "coverage": ""
        },
        "8": {
          "source": " is the entire body of the request.",
          "coverage": ""
        },
        "9": {
          "source": "",
          "coverage": ""
        },
        "10": {
          "source": " onBody is useful when you don't care about streaming the",
          "coverage": ""
        },
        "11": {
          "source": " body and would rather just wait to get the whole thing to",
          "coverage": ""
        },
        "12": {
          "source": " do any processiong.",
          "coverage": ""
        },
        "13": {
          "source": "",
          "coverage": ""
        },
        "14": {
          "source": " */",
          "coverage": ""
        },
        "15": {
          "source": "",
          "coverage": ""
        },
        "16": {
          "source": "",
          "coverage": ""
        },
        "17": {
          "source": "var onBodyHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "18": {
          "source": "  req.onBody = function(onBodyCB){",
          "coverage": 13
        },
        "19": {
          "source": "    var body = '';",
          "coverage": 3
        },
        "20": {
          "source": "    req.on('data', function(data){",
          "coverage": 3
        },
        "21": {
          "source": "      body += data;",
          "coverage": 3
        },
        "22": {
          "source": "    });",
          "coverage": ""
        },
        "23": {
          "source": "    req.on('error', function(err){",
          "coverage": 3
        },
        "24": {
          "source": "      return onBodyCB(err, body);",
          "coverage": 1
        },
        "25": {
          "source": "    });",
          "coverage": ""
        },
        "26": {
          "source": "    req.on('end', function(){",
          "coverage": 3
        },
        "27": {
          "source": "      return onBodyCB(null, body);",
          "coverage": 2
        },
        "28": {
          "source": "    });",
          "coverage": ""
        },
        "29": {
          "source": "  };",
          "coverage": ""
        },
        "30": {
          "source": "  if (cb){",
          "coverage": 13
        },
        "31": {
          "source": "    cb();",
          "coverage": 13
        },
        "32": {
          "source": "  }",
          "coverage": ""
        },
        "33": {
          "source": "};",
          "coverage": ""
        },
        "34": {
          "source": "",
          "coverage": ""
        },
        "35": {
          "source": "",
          "coverage": ""
        },
        "36": {
          "source": "module.exports = onBodyHelper;",
          "coverage": 1
        },
        "37": {
          "source": "",
          "coverage": ""
        },
        "38": {
          "source": "",
          "coverage": ""
        },
        "39": {
          "source": "",
          "coverage": ""
        },
        "40": {
          "source": "",
          "coverage": ""
        }
      }
    },
    {
      "filename": "ContextHelpers/onJson.js",
      "coverage": 100,
      "hits": 30,
      "misses": 0,
      "sloc": 30,
      "source": {
        "1": {
          "source": "/*",
          "coverage": ""
        },
        "2": {
          "source": " This helper just adds an onJson function to the",
          "coverage": ""
        },
        "3": {
          "source": " req and calls back when done.",
          "coverage": ""
        },
        "4": {
          "source": "",
          "coverage": ""
        },
        "5": {
          "source": " As a last or only parameter, the onJson function takes a ",
          "coverage": ""
        },
        "6": {
          "source": " callback in the form:",
          "coverage": ""
        },
        "7": {
          "source": " function(err, body){ ...",
          "coverage": ""
        },
        "8": {
          "source": " where error is an error that may have occurred and body",
          "coverage": ""
        },
        "9": {
          "source": " is the entire body of the request.",
          "coverage": ""
        },
        "10": {
          "source": "",
          "coverage": ""
        },
        "11": {
          "source": " An optional first parameter representing a json schema as",
          "coverage": ""
        },
        "12": {
          "source": " an object is also allowed.  If specified it will be used ",
          "coverage": ""
        },
        "13": {
          "source": " for validation.",
          "coverage": ""
        },
        "14": {
          "source": "",
          "coverage": ""
        },
        "15": {
          "source": " */",
          "coverage": ""
        },
        "16": {
          "source": "var _ = require('underscore');",
          "coverage": 1
        },
        "17": {
          "source": "var JSV = require('JSV').JSV;",
          "coverage": 1
        },
        "18": {
          "source": "",
          "coverage": ""
        },
        "19": {
          "source": "var onJsonHelper = function(req, res, handler, cb){",
          "coverage": 1
        },
        "20": {
          "source": "  req.onJson = function(){",
          "coverage": 17
        },
        "21": {
          "source": "",
          "coverage": ""
        },
        "22": {
          "source": "    var args = _.toArray(arguments);",
          "coverage": 6
        },
        "23": {
          "source": "    var schema, onBodyCB;",
          "coverage": 6
        },
        "24": {
          "source": "    switch(args.length){",
          "coverage": 6
        },
        "25": {
          "source": "      case 1:",
          "coverage": ""
        },
        "26": {
          "source": "        onBodyCB = args[0];",
          "coverage": 3
        },
        "27": {
          "source": "        break;",
          "coverage": 3
        },
        "28": {
          "source": "",
          "coverage": ""
        },
        "29": {
          "source": "      case 2:",
          "coverage": ""
        },
        "30": {
          "source": "        schema = args[0];",
          "coverage": 2
        },
        "31": {
          "source": "        onBodyCB = args[1];",
          "coverage": 2
        },
        "32": {
          "source": "        break;",
          "coverage": 2
        },
        "33": {
          "source": "",
          "coverage": ""
        },
        "34": {
          "source": "      default : throw \"req.onJson() was called with the wrong number of properties.\";",
          "coverage": 1
        },
        "35": {
          "source": "    }",
          "coverage": ""
        },
        "36": {
          "source": "",
          "coverage": ""
        },
        "37": {
          "source": "    var body = '';",
          "coverage": 5
        },
        "38": {
          "source": "    req.on('data', function(data){",
          "coverage": 5
        },
        "39": {
          "source": "      body += data;",
          "coverage": 5
        },
        "40": {
          "source": "    });",
          "coverage": ""
        },
        "41": {
          "source": "    req.on('error', function(err){",
          "coverage": 5
        },
        "42": {
          "source": "      return onBodyCB(err, body);",
          "coverage": 1
        },
        "43": {
          "source": "    });",
          "coverage": ""
        },
        "44": {
          "source": "    req.on('end', function(){",
          "coverage": 5
        },
        "45": {
          "source": "      var obj;",
          "coverage": 4
        },
        "46": {
          "source": "      try {",
          "coverage": 4
        },
        "47": {
          "source": "        obj = JSON.parse(body);",
          "coverage": 4
        },
        "48": {
          "source": "      } catch(ex) {",
          "coverage": ""
        },
        "49": {
          "source": "        // if it's not valid JSON...",
          "coverage": ""
        },
        "50": {
          "source": "        return res.status.badRequest('invalid json.', body);",
          "coverage": 1
        },
        "51": {
          "source": "      }",
          "coverage": ""
        },
        "52": {
          "source": "      if (!!schema){",
          "coverage": 3
        },
        "53": {
          "source": "        var report = JSV.createEnvironment().validate(obj, schema);",
          "coverage": 2
        },
        "54": {
          "source": "        if (report.errors.length &gt; 0){",
          "coverage": 2
        },
        "55": {
          "source": "          return res.status.badRequest('json failed schema validation.', report.errors);",
          "coverage": 2
        },
        "56": {
          "source": "        }",
          "coverage": ""
        },
        "57": {
          "source": "      }",
          "coverage": ""
        },
        "58": {
          "source": "",
          "coverage": ""
        },
        "59": {
          "source": "      return onBodyCB(null, obj);",
          "coverage": 1
        },
        "60": {
          "source": "    });",
          "coverage": ""
  