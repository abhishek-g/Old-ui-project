var vm = require('vm')
var fs = require('fs')
var dirname = require('path').dirname
var resolve = require('resolve')
var join = require('path').join
var SEP = require('path').sep

// load it explicitly out of node_modules to prevent it from being mocked
// we attempt to load it recursively up the file system in case
// it is not installed in the local-most node_modules directory,
// which can happen if the module requiring moquire also requires a
// satisfiable version of relquire.
var relquire = __dirname.split(SEP).reduceRight(function (dep, seg, i, segs) {
  if (dep) { return dep }
  var base = SEP === '/' ? '/' : ''
  base = base + segs.slice(0, i+1).join(SEP)
  var path = join(base, './node_modules/relquire')
  try {
    dep = require(path)
  } finally {
    return dep
  }
}, null)

// delete this module from the cache to force re-require in order to allow resolving test module via parent.module
delete require.cache[require.resolve(__filename)];

var cache = {}
var basedir = module && module.parent && module.parent.filename ? dirname(module.parent.filename) : ''
var packageBase = relquire.findBase(module.parent.filename)

function load(filename) {
  if (this === nocache) {
    return _load(filename)
  }

  return filename in cache
    ? cache[filename]
    : (cache[filename] = _load(filename))
    ;
}

function _load(filename) {
  var content = fs.readFileSync(filename, 'utf8')
  // remove shebang
  content = content.replace(/^\#\!.*/, '');
  return content;
}

function extend() {
  var obj = {}
  Array.pr