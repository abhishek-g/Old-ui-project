var
	fs = require('fs'),
	merge = require('merge'),
	editorconfig = require('editorconfig'),

	DEFAULTS = require('./constants/defaults'),
	MESSAGES = require('./constants/messages'),
	PATTERNS = require('./constants/ignorePatterns'),
	MAPPINGS = require('./constants/editorconfig-mappings'),

	ValidationError = require('./ValidationError'),

	// Regular Expressions:
	eol = '\\r?\\n',
	eolRegExp = new RegExp(eol),
	tabsRegExp = /^\t*(?!\s).*$/, // leading tabs without leading spaces
	tabsRegExpForBOM = /^\t*(?! |\t).*$/, // leading tabs without leading spaces (allows BOM)
	tabsLeadingRegExp = /^(\t*).*$/, // leading tabs
	spacesRegExp = /^ *(?!\s).*$/, // leading spaces without leading tabs
	spacesRegExpForBOM = /^ *(?!\t).*$/, // leading spaces without leading tabs (allows BOM)
	spacesLeadingRegExp = /^( *).*$/ // leading spaces
;

/**
 * @constructor
 * @param {Object} options
 */
function Validator(options) {
	this._options = merge({}, DEFAULTS, options || {});
	this._processedFiles = 0;
	this._invalid = {};
}

// Externalize constants:
Validator.DEFAULTS = DEFAULTS;
Validator.MESSAGES = MESSAGES;
Validator.PATTERNS = PATTERNS;

/**
 * Check if a file is valid based on validation settings
 * @param {String} path Path to file
 */
Validator.prototype.validate = function(path) {
	var self = this, stat;

	try {
		stat = fs.statSync(path);
	} catch(e) {
		this._fail(
			MESSAGES.PATH_INVALID.message
				.replace('{a}', path)
		);
	}

	if (stat.isFile()) {
		this._cleanUp();

		// Load file, settings & ignores:
		this._path = path;
		this._loadSettings();
		this._loadFile();
		this._loadIgnores();

		// Validate total file:
		this._validateNewlineMaximum();
		this._validateNewlinesEOF();

		// Validate single lines:
		this._lines.forEach(function(line, index) {
			self._validateIndentation(line, index);
			self._validateTrailingspaces(line, index);
		});

		// Validation is done:
		this._done();
	} else {
		this._fail(
			MESSAGES.PATH_ISNT_FILE.message
				.replace('{a}', path)
		);
	}
};

/**
 * Get count of processed files
 * @return {Number}
 */
Validator.prototype.getProcessedFiles = function() {
	return this._processedFiles;
};

/**
 * After validation
 * @private
 */
Validator.prototype._done = function() {
	this._processedFiles++;
	this._cleanUp();
};

/**
 * Reset references
 * @private
 */
Validator.prototype._cleanUp = function() {
	this._settings = null;
	this._data = undefined;
	this._lines = null;
	this._ignoredLines = null;
};

/**
 * Load file data
 * @private
 */
Validator.prototype._loadFile = function() {
	this._data = fs.readFileSync(this._path, this._settings.encoding);
	this._lines = this._data.split(eolRegExp);
};

/**
 * Load settings
 * @private
 */
Validator.prototype._loadSettings = function() {
	var config, key;

	// Initially the users options are the current settings:
	this._settings = merge({}, this._options);

	// Overwrite settings by .editorconfig file's settings:
	if (typeof this._settings.editorconfig === 'string') {
		var stat;

		try {
			stat = fs.statSync(this._settings.editorconfi